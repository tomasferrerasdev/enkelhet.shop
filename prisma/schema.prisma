generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Series {
  lounge
  alabaster
  capsule
}

enum Finish {
  oak
  ash
  walnut
  wenge
}

enum Role {
  admin
  user
}

model Measurements {
  id           String    @id @unique @default(uuid())
  total_height Int?
  seat_height  Int?
  width        Int?
  depth        Int?
  Product      Product[]
}

model Product {
  id             String         @id @unique @default(uuid())
  title          String
  description    String
  inStock        Int            @default(autoincrement())
  price          Float
  slug           String
  tags           String[]
  series         Series
  finish         Finish[]
  measurements   Measurements   @relation(fields: [measurementsId], references: [id])
  measurementsId String
  ProductImage   ProductImage[]
  OrderItem      OrderItem[]

  @@index([series])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String
  role          Role         @default(user)
  image         String?
  UserAddress   UserAddress?
  Order         Order[]
}

model Country {
  id           String         @id
  name         String
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User          @relation(fields: [userId], references: [id])
  userId        String
  OrderItem     OrderItem[]
  OrderAddress  OrderAddress?
  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  finsh    Finish

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
